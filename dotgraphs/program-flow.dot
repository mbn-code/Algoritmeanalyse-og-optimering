digraph C4Model {
    rankdir=TB;
    node [shape=rect, style=filled, color=lightgrey];

    // System Context Diagram
    subgraph cluster_SystemContext {
        label="System Context Diagram";
        color=blue;

        User [label="User\n- Interacts with the system", shape=ellipse];
        System [label="Main System\n- Algoritmeanalyse og optimering", shape=box];
    }

    User -> System [label="Uses"];

    // Container Diagram
    subgraph cluster_Container {
        label="Container Diagram";
        color=green;

        MainApp [label="Main Application\n- Algoritmeanalyse-og-optimering.cpp", shape=box];
        Sorting [label="Sorting Algorithms\n- sorting.cpp", shape=box];
        Searching [label="Searching Algorithms\n- searching.cpp", shape=box];
        Visualizer [label="Visualization Tool\n- Visualizer.cpp", shape=box];
    }

    System -> MainApp [label="Contains"];
    MainApp -> Sorting [label="Uses"];
    MainApp -> Searching [label="Uses"];
    MainApp -> Visualizer [label="Uses"];

    // Component Diagram
    subgraph cluster_Component {
        label="Component Diagram";
        color=yellow;

        MainAppComponent [label="Main Application Component\n- main()\n- RunSortingBenchmarks()\n- RunSearchingBenchmarks()\n- RunVisualizer()", shape=box];
        SortingComponent [label="Sorting Component\n- mergeSort()\n- quickSort()\n- bubbleSort()", shape=box];
        SearchingComponent [label="Searching Component\n- binarySearch()", shape=box];
        VisualizerComponent [label="Visualizer Component\n- parseJSON()\n- plotData()", shape=box];
    }

    MainApp -> MainAppComponent [label="Contains"];
    Sorting -> SortingComponent [label="Contains"];
    Searching -> SearchingComponent [label="Contains"];
    Visualizer -> VisualizerComponent [label="Contains"];

    // Code Diagram
    subgraph cluster_Code {
        label="Code Diagram";
        color=orange;

        MainAppCode [label="Main Application Code\n- main()\n- RunSortingBenchmarks()\n- RunSearchingBenchmarks()\n- RunVisualizer()", shape=note];
        SortingCode [label="Sorting Code\n- mergeSort()\n- quickSort()\n- bubbleSort()", shape=note];
        SearchingCode [label="Searching Code\n- binarySearch()", shape=note];
        VisualizerCode [label="Visualizer Code\n- parseJSON()\n- plotData()", shape=note];
    }

    MainAppComponent -> MainAppCode [label="Implemented by"];
    SortingComponent -> SortingCode [label="Implemented by"];
    SearchingComponent -> SearchingCode [label="Implemented by"];
    VisualizerComponent -> VisualizerCode [label="Implemented by"];
}